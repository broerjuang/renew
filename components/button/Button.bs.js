// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var $$Text = require("../text/Text.bs.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Theme = require("../theme/Theme.bs.js");
var React = require("react");
var Spacer = require("../spacer/Spacer.bs.js");
var Hoverable = require("../hoverable/Hoverable.bs.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var ReactNative = require("react-native");

function Button(Props) {
  var text = Props.text;
  var sizeOpt = Props.size;
  var variantOpt = Props.variant;
  var colorOpt = Props.color;
  var prefixElement = Props.prefixElement;
  var suffixElement = Props.suffixElement;
  var styleButton = Props.styleButton;
  var styleText = Props.styleText;
  var size = sizeOpt !== undefined ? sizeOpt : /* md */24407;
  var variant = variantOpt !== undefined ? variantOpt : /* solid */12956715;
  var color = colorOpt !== undefined ? colorOpt : /* neutral */-349573817;
  var theme = React.useContext(Theme.themeContext);
  var match = React.useState((function () {
          return false;
        }));
  var setHover = match[1];
  var sizeStyle = size !== 24407 ? (
      size >= 26868 ? (
          size >= 26875 ? ({
                height: theme.button.height.xs,
                paddingHorizontal: theme.button.paddingHorizontal.xs
              }) : ({
                height: theme.button.height.xl,
                paddingHorizontal: theme.button.paddingHorizontal.xl
              })
        ) : (
          size >= 25754 ? ({
                height: theme.button.height.sm,
                paddingHorizontal: theme.button.paddingHorizontal.sm
              }) : ({
                height: theme.button.height.lg,
                paddingHorizontal: theme.button.paddingHorizontal.lg
              })
        )
    ) : ({
        height: theme.button.height.md,
        paddingHorizontal: theme.button.paddingHorizontal.md
      });
  var color$1 = color >= 58474434 ? (
      color >= 512905955 ? (
          color >= 944645571 ? ({
                normal: theme.colors.success,
                light: theme.colors.successLight,
                dark: theme.colors.successDark
              }) : ({
                normal: theme.colors.danger,
                light: theme.colors.dangerLight,
                dark: theme.colors.dangerDark
              })
        ) : (
          color >= 164354652 ? ({
                normal: theme.colors.warning,
                light: theme.colors.warningLight,
                dark: theme.colors.warningDark
              }) : ({
                normal: theme.colors.primary,
                light: theme.colors.primaryLight,
                dark: theme.colors.primaryDark
              })
        )
    ) : (
      color !== -499495052 ? (
          color >= -349573817 ? ({
                normal: theme.colors.neutral500,
                light: theme.colors.neutral200,
                dark: theme.colors.neutral700
              }) : ({
                normal: theme.colors.info,
                light: theme.colors.infoLight,
                dark: theme.colors.infoDark
              })
        ) : ({
            normal: theme.colors.secondary,
            light: theme.colors.secondaryLight,
            dark: theme.colors.secondaryDark
          })
    );
  var typeStyle = variant >= 12956715 ? (
      variant >= 324570959 ? /* tuple */[
          {
            backgroundColor: theme.colors.background,
            borderColor: theme.colors.background
          },
          {
            color: color$1.normal
          }
        ] : /* tuple */[
          {
            backgroundColor: color$1.normal,
            borderColor: color$1.normal
          },
          {
            color: theme.button.textColor.solid
          }
        ]
    ) : (
      variant >= -184774442 ? /* tuple */[
          {
            backgroundColor: color$1.light,
            borderColor: color$1.light
          },
          {
            color: color$1.dark
          }
        ] : /* tuple */[
          {
            backgroundColor: theme.colors.background,
            borderColor: color$1.normal
          },
          {
            color: color$1.normal
          }
        ]
    );
  var resolvedStyle = [
    {
      backgroundColor: theme.colors.primary,
      borderRadius: theme.button.borderRadius,
      borderWidth: theme.button.borderWidth,
      opacity: match[0] ? 0.9 : 1,
      alignItems: "center",
      flexDirection: "row"
    },
    Caml_option.some(sizeStyle),
    Caml_option.some(typeStyle[0]),
    styleButton
  ];
  var resolvedTextStyle = [
    {
      fontWeight: (function () {
            switch (theme.button.fontWeight) {
              case 812216871 :
                  return "normal";
              case -1055161979 :
                  return "bold";
              case 1055956338 :
                  return "100";
              case 1056006067 :
                  return "200";
              case 1056055796 :
                  return "300";
              case 1056105525 :
                  return "400";
              case 1056155254 :
                  return "500";
              case 1056204983 :
                  return "600";
              case 1056254712 :
                  return "700";
              case 1056304441 :
                  return "800";
              case 1056354170 :
                  return "900";
              
            }
          })(),
      textTransform: (function () {
            switch (theme.button.textTransform) {
              case -922086728 :
                  return "none";
              case -415330030 :
                  return "uppercase";
              case -425349839 :
                  return "lowercase";
              case -509867604 :
                  return "capitalize";
              
            }
          })()
    },
    Caml_option.some(typeStyle[1]),
    styleText
  ];
  var spacerSize = size !== 24407 ? (
      size >= 26868 ? (
          size >= 26875 ? theme.text.fontSize.xs / 2 : theme.text.fontSize.xl / 2
        ) : (
          size >= 25754 ? theme.text.fontSize.sm / 2 : theme.text.fontSize.lg / 2
        )
    ) : theme.text.fontSize.md / 2;
  var onHoverIn = function (param) {
    return Curry._1(setHover, (function (param) {
                  return true;
                }));
  };
  var onHoverOut = function (param) {
    return Curry._1(setHover, (function (param) {
                  return false;
                }));
  };
  return React.createElement(Hoverable.make, {
              children: React.createElement(ReactNative.TouchableOpacity, {
                    activeOpacity: 0.7,
                    style: resolvedStyle,
                    accessibilityRole: "button",
                    children: null
                  }, prefixElement !== undefined ? React.createElement(React.Fragment, undefined, React.createElement(ReactNative.View, {
                              children: Caml_option.valFromOption(prefixElement)
                            }), React.createElement(Spacer.make, {
                              x: spacerSize
                            })) : null, React.createElement(ReactNative.View, {
                        children: React.createElement($$Text.make, {
                              value: text,
                              styleText: resolvedTextStyle,
                              size: size
                            })
                      }), suffixElement !== undefined ? React.createElement(React.Fragment, undefined, React.createElement(Spacer.make, {
                              x: spacerSize
                            }), React.createElement(ReactNative.View, {
                              children: Caml_option.valFromOption(suffixElement)
                            })) : null),
              onHoverIn: onHoverIn,
              onHoverOut: onHoverOut
            });
}

var UIText;

var make = Button;

var $$default = Button;

exports.UIText = UIText;
exports.make = make;
exports.$$default = $$default;
exports.default = $$default;
exports.__esModule = true;
/* Text Not a pure module */
